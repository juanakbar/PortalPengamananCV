"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var crypto_1 = require("crypto");
var fs_1 = require("fs");
var path_1 = require("path");
var generateKeyPairSync = require('crypto').generateKeyPairSync;
var NodeRSA = /** @class */ (function () {
    /**
     *
     * @param publicKeyPath this should be absolute path
     * @param privateKeyPath this should be absolute path
     */
    function NodeRSA(publicKeyPath, privateKeyPath, modulusLength) {
        if (publicKeyPath === void 0) { publicKeyPath = ''; }
        if (privateKeyPath === void 0) { privateKeyPath = ''; }
        this.publicKeyPath = publicKeyPath;
        this.privateKeyPath = privateKeyPath;
        this.modulusLength = modulusLength || 2048;
    }
    /**
     *
     * @param {Object} args
     * @param {String} args.publicKeyPath
     * @param {String} args.text the text that you need to encrypt
     *
     * @returns {String}
     */
    NodeRSA.prototype.encryptStringWithRsaPublicKey = function (args) {
        var text = args.text, _a = args.keyPath, keyPath = _a === void 0 ? this.publicKeyPath : _a;
        var absolutePath = path_1.resolve(keyPath);
        var publicKey = fs_1.readFileSync(absolutePath, 'utf8');
        var buffer = Buffer.from(text);
        var encrypted = crypto_1.publicEncrypt(publicKey, buffer);
        return encrypted.toString('base64');
    };
    /**
     *
     * @param {Object} args
     * @param {String} args.privateKeyPath
     * @param {String} args.text the text that you need to decrypt
     *
     * @returns {String}
     */
    NodeRSA.prototype.decryptStringWithRsaPrivateKey = function (args) {
        var text = args.text, _a = args.keyPath, keyPath = _a === void 0 ? this.privateKeyPath : _a;
        var absolutePath = path_1.resolve(keyPath);
        var privateKey = fs_1.readFileSync(absolutePath, 'utf8');
        var buffer = Buffer.from(text, 'base64');
        var decrypted = crypto_1.privateDecrypt(privateKey, buffer);
        return decrypted.toString('utf8');
    };
    NodeRSA.prototype.createPrivateAndPublicKeys = function (modulusLength) {
        if (modulusLength === void 0) { modulusLength = this.modulusLength; }
        var _a = generateKeyPairSync('rsa', {
            modulusLength: modulusLength,
            publicKeyEncoding: {
                type: 'spki',
                format: 'pem',
            },
            privateKeyEncoding: {
                type: 'pkcs8',
                format: 'pem',
            },
        }), privateKey = _a.privateKey, publicKey = _a.publicKey;
        return { privateKey: privateKey, publicKey: publicKey };
    };
    return NodeRSA;
}());
exports.default = NodeRSA;
